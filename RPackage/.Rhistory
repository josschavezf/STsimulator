#' \describe{
#' \item{cov_mat}{The fitted covariance (or equivalently in this case, correlation) matrix of the
#' Gaussin copula model.}
#' \item{marginal_param1}{A matrix of the parameters for the marginal distributions of genes in
#' group one.}
#' \item{marginal_param2}{A matrix of the parameters for the marginal distributions of genes in
#' group two.}
#' \item{gene_sel1}{A numeric vector of the row indices of the genes in group one.}
#' \item{gene_sel2}{A numeric vector of the row indices of the genes in group two.}
#' \item{gene_sel3}{A numeric vector of the row indices of the genes in group three.}
#' \item{zp_cutoff}{Same as the input.}
#' \item{min_non_zero_num}{Same as the input.}
#' \item{sim_method}{A character string that says 'copula'. To be distinguished with the
#' (w/o copula) model.}
#' }
#'
fit_Gaussian_copula <- function(x, marginal = c('auto_choose', 'zinb', 'nb', 'poisson'),
jitter = TRUE, zp_cutoff = 0.8,
min_nonzero_num = 2){
marginal <- match.arg(marginal)
n <- ncol(x)
p <- nrow(x)
gene_zero_prop <- apply(x, 1, function(y){
sum(y < 1e-5) / n
})
gene_sel1 <- which(gene_zero_prop < zp_cutoff)
gene_sel2 <- which(gene_zero_prop < 1.0 - min_nonzero_num/n &
gene_zero_prop >= zp_cutoff)
gene_sel3 <- (1:p)[-c(gene_sel1, gene_sel2)]
if(length(gene_sel1) > 0){
marginal_result1 <- fit_marginals(x[gene_sel1, , drop = FALSE], marginal, jitter = jitter, DT = TRUE)
quantile_normal <- qnorm(marginal_result1$u)
cov_mat <- cor(t(quantile_normal))
}else{
cov_mat = NULL
marginal_result1 = NULL
}
if(length(gene_sel2) > 0){
marginal_result2 <- fit_marginals(x[gene_sel2, , drop = FALSE], marginal, DT = FALSE)
}else{
marginal_result2 = NULL
}
return(list(cov_mat = cov_mat, marginal_param1 = marginal_result1$params,
marginal_param2 = marginal_result2$params,
gene_sel1 = gene_sel1, gene_sel2 = gene_sel2, gene_sel3 = gene_sel3,
zp_cutoff = zp_cutoff, min_nonzero_num = min_nonzero_num,
sim_method = 'copula', n_cell = n, n_read = sum(x)))
}
# fit_wo_copula ---------------
#' Fit a (w/o copula) model for a count matrix of a single cell type
#'
#' This function only fits the marginal distribution for each gene.
#'
#' @inheritParams fit_marginals
#' @inheritParams fit_Gaussian_copula
#' @return The genes of \code{x} will be partitioned into two groups. The first group contains
#' genes with at least \code{min_non_zero_num} non-zero values. The second group contains the
#' other genes. For the first group, the marginal distribution of each gene will be fitted.
#' For the last group, no model will be fitted and only the index of these genes will be
#' recorded. A list that contains the above fitted model will be returned that contains the
#' following components.
#' \describe{
#' \item{marginal_param1}{A matrix of the parameters for the marginal distributions of genes in
#' group one.}
#' \item{gene_sel1}{A numeric vector of the row indices of the genes in group one.}
#' \item{gene_sel2}{A numeric vector of the row indices of the genes in group two.}
#' \item{min_non_zero_num}{Same as the input.}
#' \item{sim_method}{A character string that says 'ind', short for 'independent'. To be
#' distinguished with the copula model.}
#' }
#'
fit_wo_copula <- function(x, marginal = c('auto_choose', 'zinb', 'nb', 'poisson'),
jitter = TRUE, min_nonzero_num = 2){
marginal <- match.arg(marginal)
n <- ncol(x)
p <- nrow(x)
gene_zero_prop <- apply(x, 1, function(y){
sum(y < 1e-5) / n
})
gene_sel1 <- which(gene_zero_prop < 1.0 - min_nonzero_num/n)
gene_sel2 <- (1:p)[-gene_sel1]
if(length(gene_sel1) > 0){
marginal_result1 <- fit_marginals(x[gene_sel1, ], marginal, jitter = jitter, DT = FALSE)
}else{
marginal_result1 = NULL
}
return(list(marginal_param1 = marginal_result1$params,
gene_sel1 = gene_sel1, gene_sel2 = gene_sel2,
min_nonzero_num = min_nonzero_num, sim_method = 'ind',
n_cell = n, n_read = sum(x)))
}
# fit_model_scDesign2 ---------------
#' Fit models for a count matrix
#'
#' @param data_mat      A matrix of shape p by n that contains count values. Each of its
#'                      column names should be the cell type names of that cell. Its column
#'                      names should also match \code{cell_type_sel}.
#' @param cell_type_sel A character vector that contains the selected cell types for which a
#'                      model will be fitted.
#' @param sim_method    Specification of the type of model.
#'                      Default value is 'copula', which selects the copula model.
#'                      'ind' will select the (w/o copula) model.
#' @inheritParams fit_Gaussian_copula
#' @param ncores        A numeric value that indicates the number of parallel cores for model
#'                      fitting. One core for each cell type.
#' @return A list with the same length as \code{cell_type_sel} that contains the fitted model
#' as each of its element.
#'
fit_model_scDesign2 <- function(data_mat, cell_type_sel,
sim_method = c('copula', 'ind'),
marginal = c('auto_choose', 'zinb', 'nb', 'poisson'),
jitter = TRUE, zp_cutoff = 0.8,
min_nonzero_num = 2, ncores = 2){
sim_method <- match.arg(sim_method)
marginal <- match.arg(marginal)
if(sum(abs(data_mat - round(data_mat))) > 1e-5){
warning('The entries in the input matrix are not integers. Rounding is performed.')
data_mat <- round(data_mat)
}
if(sim_method == 'copula'){
param <- parallel::mclapply(1:length(cell_type_sel), function(iter){
fit_Gaussian_copula(data_mat[, colnames(data_mat) == cell_type_sel[iter] ],
marginal=marginal,
jitter = jitter, zp_cutoff = zp_cutoff,
min_nonzero_num = min_nonzero_num)
}, mc.cores = ncores)
}else if(sim_method == 'ind'){
param <- mclapply(1:length(cell_type_sel), function(iter){
fit_wo_copula(x=data_mat[, colnames(data_mat) == cell_type_sel[iter]],
marginal=marginal,
jitter = jitter,
min_nonzero_num = min_nonzero_num)
}, mc.cores = ncores)
}
names(param) <- cell_type_sel
param
}
# Est_GeneCopula ---------------
#' Estimate Gaussian Copula for Gene Expression Matrix
#' @param expr expr
#' @param anno description
#' @param zp_cutoff description
#' @param min_nonzero_num description
#' @param ncores description
#' @return Estimated Gaussian Copula
#' @export
Est_GeneCopula <- function(expr, anno,  zp_cutoff = 0.8, min_nonzero_num =
3, ncores = 1) {
expr=as.matrix(expr)
colnames(expr)=anno
ct=unique(anno)
copula=fit_model_scDesign2(data_mat=expr,
cell_type_sel=ct, sim_method = 'copula',
marginal = 'auto_choose',
jitter = TRUE,
zp_cutoff = zp_cutoff,
min_nonzero_num = min_nonzero_num,
ncores = ncores)
CopulaEst=lapply(1:length(copula), function(f1) copula[[f1]]$cov_mat)
# CopulaEst2=lapply(CopulaEst, function(f)
#   round(f, digits=2)) # do not guarantee positive definite
return(CopulaEst)
}
source("RPackage/R/PointSimulator_NoData.R")
source("Github/RPackage/R/PointSimulator_NoData.R")
source("Github/RPackage/R/PointSimulator_STData.R")
source("Github/RPackage/R/ExprSimulator.R")
source("Github/RPackage/R/scDesign2_fit_revised.R")
source("Github/RPackage/R/scDesign2_simulate_revised.R")
source("Github/RPackage/R/ParameterDigest.R")
source("Github/RPackage/R/MultiCell.R")
# parallel
ncores=detectCores()-2; registerDoParallel(ncores)
print(paste("No. of Cores in Use:", ncores))
print("Start the simulation")
# Digest parameters
para=ParaDigest(input)
attach(para)
# Load  data
expr=ExprLoad(para)
feature=CellFeatureLoad(para)
colnames(expr)=feature[,1]
print("Finished loading data")
# Simulate cells
if (path==1) {
cell_loc_list=ParaCellsNoST(para=para,
all_seeds=all_seeds[[1]])
}
if (path==2) {
cell_loc_list=ParaCellsST(para=para, feature=feature,
all_seeds=all_seeds[[1]])
}
if (path==3) {
cell_loc_list=ParaExistingCellsST(m=num_simulated_datasets,
feature=feature)
}
print("Finished simulating the cell spatial maps")
# Trim  data (no. of cells) in expr to make the expr estimation faster
ctype=table(feature[,1])
idxc=foreach (i = 1:length(ctype), .combine = "c") %dopar% {
if (ctype[i]>2500) {
sample(which(feature[,1]==names(ctype)[i]), 2500)
} else {which(feature[,1]==names(ctype)[i])
}
}
expr2=expr[,idxc]
# Copula - from parameter file
CopulaEst=ParameterCopula(para=para, expr=expr2,
feature=feature, ncores=ncores)
para
gene_cor
copula_input
#
input="UseDocker/decoy1.1.tsv"
ParaSimulation(input=input)
detach(para)
detach(para)
detach(para)
detach(para)
detach(para)
detach(para)
rm(list=ls())
detach("package:data.table", unload = TRUE)
input="UseDocker/decoy1.1.tsv"
ParaSimulation(input=input)
detach(para)
detach(para)
detach(para)
# parallel
ncores=detectCores()-2; registerDoParallel(ncores)
print(paste("No. of Cores in Use:", ncores))
print("Start the simulation")
# Digest parameters
para=ParaDigest(input)
attach(para)
# Load  data
expr=ExprLoad(para)
source("Github/RPackage/R/PointSimulator_NoData.R")
source("Github/RPackage/R/PointSimulator_STData.R")
source("Github/RPackage/R/ExprSimulator.R")
source("Github/RPackage/R/scDesign2_fit_revised.R")
source("Github/RPackage/R/scDesign2_simulate_revised.R")
source("Github/RPackage/R/ParameterDigest.R")
source("Github/RPackage/R/MultiCell.R")
# parallel
ncores=detectCores()-2; registerDoParallel(ncores)
print(paste("No. of Cores in Use:", ncores))
print("Start the simulation")
# Digest parameters
para=ParaDigest(input)
attach(para)
# Load  data
expr=ExprLoad(para)
feature=CellFeatureLoad(para)
colnames(expr)=feature[,1]
print("Finished loading data")
# Simulate cells
if (path==1) {
cell_loc_list=ParaCellsNoST(para=para,
all_seeds=all_seeds[[1]])
}
if (path==2) {
cell_loc_list=ParaCellsST(para=para, feature=feature,
all_seeds=all_seeds[[1]])
}
if (path==3) {
cell_loc_list=ParaExistingCellsST(m=num_simulated_datasets,
feature=feature)
}
print("Finished simulating the cell spatial maps")
# Trim  data (no. of cells) in expr to make the expr estimation faster
ctype=table(feature[,1])
idxc=foreach (i = 1:length(ctype), .combine = "c") %dopar% {
if (ctype[i]>2500) {
sample(which(feature[,1]==names(ctype)[i]), 2500)
} else {which(feature[,1]==names(ctype)[i])
}
}
expr2=expr[,idxc]
# Copula - from parameter file
CopulaEst=ParameterCopula(para=para, expr=expr2,
feature=feature, ncores=ncores)
CopulaEst
dim(CopulaEst)
CopulaEst[1:1, 1:2]
expr=expr2
dim(expr2)
gene_cor
copula_input
#
input="UseDocker/decoy1.1.tsv"
ParaSimulation(input=input)
input
detach(para)
detach(para)
detach(para)
detach(para)
ParaSimulation(input=input)
detach(para)
detach(para)
# parallel
ncores=detectCores()-2; registerDoParallel(ncores)
print(paste("No. of Cores in Use:", ncores))
print("Start the simulation")
# Digest parameters
para=ParaDigest(input)
attach(para)
# Load  data
expr=ExprLoad(para)
feature=CellFeatureLoad(para)
colnames(expr)=feature[,1]
print("Finished loading data")
# Simulate cells
if (path==1) {
cell_loc_list=ParaCellsNoST(para=para,
all_seeds=all_seeds[[1]])
}
if (path==2) {
cell_loc_list=ParaCellsST(para=para, feature=feature,
all_seeds=all_seeds[[1]])
}
if (path==3) {
cell_loc_list=ParaExistingCellsST(m=num_simulated_datasets,
feature=feature)
}
print("Finished simulating the cell spatial maps")
# Trim  data (no. of cells) in expr to make the expr estimation faster
ctype=table(feature[,1])
idxc=foreach (i = 1:length(ctype), .combine = "c") %dopar% {
if (ctype[i]>2500) {
sample(which(feature[,1]==names(ctype)[i]), 2500)
} else {which(feature[,1]==names(ctype)[i])
}
}
expr2=expr[,idxc]
expr=expr2
CopulaEst=ParameterCopula(para=para, expr=expr2,
feature=feature, ncores=ncores)
dim(CopulaEst)
CopulaEst
class(CopulaEst)
if( is.null(ModelFitFile)==F) {
load(ModelFitFile)
} else {model_params=NULL}
ModelFitFile=NULL
# Simulate Expr for these cells
if( is.null(ModelFitFile)==F) {
load(ModelFitFile)
} else {model_params=NULL}
all_seeds
region_specific_model
region_specific_model=="NULL"
region_specific_model=="TRUE"
CopulaEst=list(Est_GeneCopula(expr=expr,
anno=anno, zp_cutoff=0.8, ncores=ncores))
expr=as.matrix(expr)
anno=feature[,1]
colnames(expr)=anno
CopulaEst=list(Est_GeneCopula(expr=expr,
anno=anno, zp_cutoff=0.8, ncores=ncores))
class(CopulaEst)
CopulaEst[[1]]
length(CopulaEst)
all_seeds
all_seeds=all_seeds[[1]]
sim_method=ifelse(gene_cor=="TRUE", "copula", "ind")
# fit by input data
if (is.null(model_params)) {
model_params=ParaFitExpr(para, expr, feature,
CopulaEst, ncores=ncores, save=F)
}
# simulate
i=1
length(CopulaEst)
ParaExpr(para=para,
cell_loc_list=cell_loc_list,
expr=expr2, feature=feature,
CopulaEst=CopulaEst, all_seeds=all_seeds[[1]],
ncores=ncores, model_params=model_params)
length(CopulaEst)
length(CopulaEst[[1]])
path_to_output_dir
out_path_name=paste0(path_to_output_dir, "_Copula.RData")
save(CopulaEst, file=out_path_name)
out_path_name
path_to_output_dir
out_path_name=paste0(path_to_output_dir, output_name, "_Copula.RData")
out_path_name
save(CopulaEst, file=out_path_name)
library(STsimulator)
detach(para)
detach(para)
input="UseDocker/decoy1.1.tsv"
ParaSimulation(input=input)
input="UseDocker/decoy1.2.tsv"
ParaSimulation(input=input)
library(STsimulator)
input="UseDocker/decoy1.tsv"
ParaSimulation(input=input)
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator")
input="UseDocker/decoy1.tsv"
ParaSimulation(input=input)
#
input="UseDocker/decoy1.1.tsv"
ParaSimulation(input=input)
input="UseDocker/decoy1.2.tsv"
ParaSimulation(input=input)
input="UseDocker/decoy2.tsv"
ParaSimulation(input=input)
input="UseDocker/decoy2.2.tsv"
ParaSimulation(input=input)
input="UseDocker/decoy3.tsv"
ParaSimulation(input=input)
# solve bugs in this one
# detach(para)
input="UseDocker/decoy3.2.tsv"
ParaSimulation(input=input)
input="UseDocker/example3.tsv"
ParaSimulation(input=input)
input="UseDocker/example3.tsv"
ParaSimulation(input=input)
input="UseDocker/example3.tsv"
ParaSimulation(input=input)
detach(para)
detach(para)
detach(para)
input="UseDocker/decoy3.tsv"
ParaSimulation(input=input)
input="UseDocker/example3.tsv"
ParaSimulation(input=input)
library(STsimulator)
devtools::document()
devtools::document()
install.packages("spatastat.geom")
?connectUp
devtools::document()
library(STsimulator)
Good practice’ in ‘?attach’
?connectUp
?RandomRegionWindow
RandomRegionWindow(nRegion=3, nGrid=20, seed=NULL)
RandomRegionWindow(nRegion=3, nGrid=20, seed=NULL)
?STsimulator
library(STsimulator)
?STsimulator
devtools::document()
library(STsimulator)
?STsimulator
?STsimulator
?rnorm
?tail
input="UseDocker/example1.tsv"
para=ParaDigest(input)
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator")
para=ParaDigest(input)
attach(para)
cell_feature_data_file
tail(unlist(strsplit(cell_feature_data_file, ".", fixed=TRUE)), 1)
?tail
type=utils::tail(unlist(strsplit(cell_feature_data_file, ".", fixed=TRUE)), 1)
type
?globalVariables
?rbinom
devtools::document()
devtools::document()
devtools::document()
?ppp
rlang::last_trace()
devtools::document()
devtools::document()
library(STsimulator)
?STsimulator
?STsimulator
?
Add.Distance.Asso.Pattern
?cell.loc.fc
library(STsimulator)
detach("package:STsimulator", unload = TRUE)
library(STsimulator)
library(STsimulator)
library(STsimulator)
detach("package:STsimulator", unload = TRUE)
library(STsimulator)
?terra
?dist
?sd’
?sd
usethis::use_agpl_license()
usethis::use_gpl_license()
para=ParaDigest(input)
library(STsimulator)
para=ParaDigest(input)
input="UseDocker/example1.tsv"
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator")
# source("Github/RPackage/R/PointSimulator_NoData.R")
# source("Github/RPackage/R/PointSimulator_STData.R")
# source("Github/RPackage/R/ExprSimulator.R")
# source("Github/RPackage/R/scDesign2_fit_revised.R")
# source("Github/RPackage/R/scDesign2_simulate_revised.R")
# source("Github/RPackage/R/ParameterDigest.R")
# source("Github/RPackage/R/MultiCell.R")
# example data
# detach(para)
input="UseDocker/example1.tsv"
para=ParaDigest(input)
View(para)
all_seeds
para$para
para$all_seeds
?qnorm
?rbinom
?sd
