#  S=c(2, -1)) # interactive input by cell type
same.dis.cutoff =0.05
even.distribution.coef=0.1
# more expression parameters
Copula=CopulaEst # Copula=NULL if an external data is used
depth_simu_ref_ratio=1 #(1: sum(simulated) = sum(expr))
anno=colnames(expr)
cell.inh.attr.input=vector("list", nRegion);
cell.inh.attr.input
getwd()
input="../ParameterFile/parameter_file_for_xiaoyu.tsv"
para=read.table(input)
para=fread(input)
library(data.table)
para=fread(input)
View(para)
para$parameters
para$parameters=="expression_data_file"
para$value
expression_data_file=para[para$parameters=="expression_data_file", "value"]
expression_data_file
spatial_data_file=para[para$parameters=="spatial_data_file", "value"]
spatial_data_file
para=data.frame(fread(input))
expression_data_file=para[para$parameters=="expression_data_file", "value"]
spatial_data_file=para[para$parameters=="spatial_data_file", "value"]
expression_data_file
spatial_data_file
is.na(spatial_data_file)
spatial_data_file==""
simulation_seed=as.numeric(para[para$parameters=="simulation_seed", "value"])
simulation_seed
num_simulated_cells=as.numeric(para[para$parameters=="num_simulated_cells", "value"])
num_simulated_cells
num_regions=para[para$parameters=="num_regions", "value"]
custom_cell_type_proportions=para[para$parameters=="custom_cell_type_proportions", "value"]
grep("cell_type_proportion",
para$parameters
)
cell_type_proportion=para[grep("cell_type_proportion",
para$parameters), "value"]
cell_type_proportion
cell_type_proportion=para[grep("cell_type_proportion_",
para$parameters), "value"]
cell_type_proportion
simulation_seed=as.numeric(para[para$parameters==
"simulation_seed", "value"])
num_simulated_cells=as.numeric(para[para$parameters==
"num_simulated_cells", "value"])
num_regions=para[para$parameters==
"num_regions", "value"]
custom_cell_type_proportions=para[para$parameters==
"custom_cell_type_proportions", "value"]
cell_type_proportion=para[grep("cell_type_proportion_",
para$parameters), "value"]
custom_cell_location_interactions=para[para$parameters==
"custom_cell_location_interactions", "value"]
cell_overlap_cutoff=para[para$parameters==
"cell_overlap_cutoff", "value"]
cell_even_distribution=para[para$parameters==
"cell_even_distribution", "value"]
cell_type_proportion
custom_cell_type_proportions
library(devtools)
document()
document()
library(STsimulator)
fit_marginals
document()
document()
library(STsimulator)
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
library(data.table)
#library(scDesign2)
library(parallel, MASS, pscl)
# (1.3.1) --> No spatial data
# We need expression data
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
load("../Data/scRNAseq_GTEx_breast.RData")
# expr --> gene by cell  matrix of counts --> from datasets
# anno --> colnames of expr
anno=colnames(expr)
# CopulaEst --> optional; estimated Gaussian copulas from expr data
# put in parameters --
seed=124 # "Seed (to ensure reproducible simulation):"
nRegion=2  # No. of regions (suggested: 1-10)
N=1000    # No. of cells
# more spatial parameters --
# "No. of cells in each cell type in each region"
# Give default as below; allow users to chagne"
cell.prop=vector("list", nRegion);
for (r in 1:nRegion) {cell.prop[[r]]=table(anno)/length(anno)}
# "Cell inhibition/attraction of cells from appearing its neighborhood"
# create a L rows by 3 columns by nRegion array
# default NULL; Allow users to choose cell type 1, cell type 2, strength, and add rows.
# below is an example of 2 by 3 by 2 array
cell.inh.attr.input=vector("list", nRegion);
cell.inh.attr.input[[1]]=data.frame(C1=c("Adipocyte", "Epithelial cell"),
C2=c("Endothelial cell","Epithelial cell"),
S=c(2, -1)) # interactive input by cell type
#
same.dis.cutoff =0.05
even.distribution.coef=0.1
# more expression parameters
Copula=CopulaEst # Users do not need to choose; make Copula= NULL if an external data is used
depth_simu_ref_ratio=1 # "Ratio of simulated/reference sequencing depth"; default=1
# more parameters every time for adding a spatial pattern
# EX1: Add.Spatial.Expr.Pattern
# r=1
# CellType="Adipocyte"
# GeneID=NULL
# PropOfGenes=0.1
# delta.mean=1
# delta.sd=0.001
# EX1: Add.Spatial.Expr.Pattern
# r=1
# CellType="Adipocyte"
# GeneID="VHL"
# PropOfGenes=NULL
# delta.mean=1
# delta.sd=0.001
#  EX2: Add.Distance.Asso.Pattern
# r=2,
# perturbed.cell.type="Epithelial cell",
# adjacent.cell.type="Immune (myeloid)",
# int.dist.threshold=0.1,
# delta.mean=1,
# delta.sd=0.001,
# GeneID=NULL,
# PropOfGenes=0.1
# EX3: Add.Expr.Asso.Pattern
# r=1,
# perturbed.cell.type="Fibroblast",
# adjacent.cell.type="Endothelial cell",
# int.dist.threshold=0.1,
# delta.mean=1,
# delta.sd=0.001,
# GenePairIDMatrix=NULL,
# PropOfGenes=0.1,
# Bidirectional=T
# Step 1: Generate regions ----
# Input: seed, nRegion
# Output: window, area
win=RandomRegionWindow(nRegion=nRegion, seed=seed)
# Step 2: Generate cells in each region (repeat for `nRegion` times) ----
# Input: N, win, cell.prop, cell.inh.attr.input, same.dis.cutoff, even.distribution.coef, seed
# Output: cell.loc
# R1 ---> make it inside of a function
cell.loc=cell.loc.fc(N=N, win=win, cell.prop=cell.prop,
cell.inh.attr.input=cell.inh.attr.input,
same.dis.cutoff =same.dis.cutoff,
even.distribution.coef=even.distribution.coef,
seed=seed)
# Step 3: Generate expression profiles for cells in each region (repeat it for `nRegion` times) ----
# Input: expr, anno, Copula (optional; if use our data, Copula is pre-estimated),
#        cell.loc, depth_simu_ref_ratio
# Output: a list of length `nRegion`; each element is a G by N_r count matrix
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed)
# Step 4: Add spatial patterns (repeatedly)
# Input: expr, r, CellType (interactive select), GeneID (upload) or PropOfGenes,
#               delta.mean (averaged effect size), delta.sd (sd of effect size)
# Output: G by N.R1 beta.matrix
pattern1=Add.Spatial.Expr.Pattern(sim.count, r=1,
CellType="Adipocyte",
GeneID=NULL,
PropOfGenes=0.1,
delta.mean=1,
delta.sd=0.001, seed=seed)
# Step 5: Add distance to gene interactions
pattern2= Add.Distance.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count, r=2,
perturbed.cell.type="Epithelial cell",
adjacent.cell.type="Immune (myeloid)",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GeneID=NULL,
PropOfGenes=0.1,
seed=seed)
# Step 6: Add expr to gene interactions
pattern3= Add.Expr.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count,  r=1,
perturbed.cell.type="Fibroblast",
adjacent.cell.type="Endothelial cell",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GenePairIDMatrix=NULL,
PropOfGenes=0.1,
Bidirectional=T,
seed=seed)
# Step 7: Adjust total counts for Steps 4-6
sim.count.update=Pattern.Adj(sim.count, pattern.list=list(pattern1, pattern2, pattern3),
bond.extreme=T, keep.total.count=T,
integer=T)
# Step 5: combine points in different regions
output=MergeRegion(points.list=cell.loc, expr.list=sim.count.update)
warnings()
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim.method="coupla")
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim.method="coupla")
Use_scDesign2
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="coupla")
warnings()
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula")
warnings()
sim_method="copula"
path=getwd()
path
expression_data_file
input="../ParameterFile/parameter_file_for_xiaoyu.tsv"
expression_data_file=para[para$parameters=="expression_data_file", "value"]
para=data.frame(fread(input))
expression_data_file=para[para$parameters=="expression_data_file", "value"]
expression_data_file
SaveCopulaName=scRNAseq_GTEx_breast
SaveCopulaName="scRNAseq_GTEx_breast"
getwd()
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula",
SaveCopulaName="../Data/Copula1")
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula",
SaveCopulaName="../Data/Copula1")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="ind",
SaveCopulaName="../Data/Copula1")
?Use_scDesign2_1region
?Find.Neighbor.Pairs
Find.Neighbor.Pairs
?Add.Distance.Asso.Pattern
document()
rm(list = c("Add.Distance.Asso.Pattern",
"Add.Spatial.Expr.Pattern", "fit_model_scDesign2",
"RandomRegionWindow", "scDesign2.revised",
"Use_scDesign2", "Use_scDesign2_1region"))
document()
rm(list = c("MergeRegion", "Pattern.Adj"))
document()
library(STsimulator)
rm(list=ls())
setwd("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics")
load("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator/DataToShare/SeqFishPlus.RData")
load("DataToShare/SeqFishPlus.RData")
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/DataToShare/SeqFishPlus.RData")
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/DataToShare/SeqFishPlus.RData")
setwd("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator")
loc=SeqFishPlus_loc
anno=SeqFishPlus_anno
ct=apply(SeqFishPlus_exprs, 1, sum)
loc=loc[which(anno!="Ependymal"),]
anno=anno[which(anno!="Ependymal")]
expr=expr[,which(anno!="Ependymal")]
loc=loc[which(anno!="Ependymal"),]
anno=anno[which(anno!="Ependymal")]
expr=SeqFishPlus_exprs[,which(anno!="Ependymal")]
dim(loc)
loc[1:3,]
dim(anno)
length(anno)
table(anno)
sum(anno)
rm(list=ls())
library(data.table)
library(Giotto)
setwd("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator")
## Load expression and cell location
VC_exprs = read.table("../Data/Giotto/data/2019_seqfish_plus_SScortex/count_matrix/cortex_svz_expression.txt")
VC_locs = fread("../Data/Giotto/data/2019_seqfish_plus_SScortex/cell_locations/cortex_svz_centroids_coord.txt")
VC_slide = fread("../Data/Giotto/data/2019_seqfish_plus_SScortex/cell_locations/cortex_svz_centroids_annot.txt")
loc_offset_file = data.table(field = c(0, 1, 2, 3, 4, 5, 6),
x_offset = c(0, 1654.97, 1750.75, 1674.35, 675.5, 2048, 675),
y_offset = c(0, 0, 0, 0, -1438.02, -1438.02, 0))
# clean annotation
VC_slide[which(VC_slide$cell_types=="Choroid Plexus"), ]$cell_types="ChoroidPlexus"
VC_slide[which(VC_slide$cell_types=="Excitatory neuron"), ]$cell_types="ExcitatoryNeuron"
VC_slide[which(VC_slide$cell_types=="Neural Stem"), ]$cell_types="NeuralStem"
# clean mulitple slides of the experiments
VC_loc_merge=merge(VC_locs, VC_slide, by="ID", sort=F)
colnames(VC_loc_merge)[2:4]=c("X_coord_col", "Y_coord_col", "field_col")
location_file = VC_loc_merge; offset_file = loc_offset_file;cumulate_offset_x = T; cumulate_offset_y = F;
field_col = 'field_col'; reverse_final_x = F; reverse_final_y = T
x_offset_final = x_offset = y_offset_final = y_offset = field = NULL
if (cumulate_offset_x == TRUE) {
offset_file[, `:=`(x_offset_final, cumsum(x_offset))]
} else {
offset_file[, `:=`(x_offset_final, x_offset)]
}
if (cumulate_offset_y == TRUE) {
offset_file[, `:=`(y_offset_final, cumsum(y_offset))]
} else {
offset_file[, `:=`(y_offset_final, y_offset)]
}
copy_loc_file = data.table::copy(location_file)
new_x_coord = rep(0, nrow(copy_loc_file))
new_y_coord = rep(0, nrow(copy_loc_file))
for (row in 1:nrow(copy_loc_file)) {
myrow = copy_loc_file[row, ]
field_select = myrow[["field_col"]]
X_select = myrow[["X_coord_col"]]
Y_select = myrow[["Y_coord_col"]]
X_offset = offset_file[field == field_select][["x_offset_final"]]
Y_offset = offset_file[field == field_select][["y_offset_final"]]
final_x = X_select + X_offset
final_y = Y_select + Y_offset
new_x_coord[row] = final_x
new_y_coord[row] = final_y
}
if (reverse_final_x == TRUE)
new_x_coord = new_x_coord * -1
if (reverse_final_y == TRUE)
new_y_coord = new_y_coord * -1
copy_loc_file = data.table(copy_loc_file)
copy_loc_file[, `:=`(c("X_final", "Y_final"), list(new_x_coord,
new_y_coord))]
stitch_file=copy_loc_file[,.(X_final, Y_final)]
loc_offset_file = loc_offset_file[,.(field, x_offset_final, y_offset_final)]
dim(copy_loc_file)
dim(VC_exprs)
diM(VC_locs)
length(VC_locs)
VC_locs
dim(VC_locs)
# clean annotation
copy_loc_file=data.frame(copy_loc_file)
SeqFishPlus_loc=copy_loc_file[which(copy_loc_file$field_col<=4),c("X_final", "Y_final")]
SeqFishPlus_exprs=VC_exprs[,which(copy_loc_file$field_col<=4)]
SeqFishPlus_anno=copy_loc_file[which(copy_loc_file$field_col<=4),c("cell_types")]
SeqFishPlus_exprs[1:3, 1:3]
colnames(SeqFishPlus_exprs)=SeqFishPlus_anno
saveRDS(SeqFishPlus_exprs,
file="Paper_Simulator/DataToShare/SeqFishPlusCortexFilter_expr.RDS")
saveRDS(SeqFishPlus_exprs,
file="Paper_Simulator/DataToShare/SeqFishPlusCortexFilter_expr.rds")
getwd()
saveRDS(SeqFishPlus_exprs,
file="DataToShare/SeqFishPlusCortexFilter_expr.RDS")
SeqFishPlus_exprs[1:3 ,1:3]
saveR(SeqFishPlus_exprs,
file="DataToShare/SeqFishPlusCortexFilter_expr.Rdata")
save(SeqFishPlus_exprs,
file="DataToShare/SeqFishPlusCortexFilter_expr.Rdata")
class(SeqFishPlus_exprs)
SeqFishPlus_exprs=sparseMatrixStats(SeqFishPlus_exprs)
SeqFishPlus_exprs=sparseMatrix(SeqFishPlus_exprs)
library(Matrix)
SeqFishPlus_exprs=sparseMatrix(SeqFishPlus_exprs)
SeqFishPlus_exprs[1:3, 1:3]
SeqFishPlus_exprs=sparseMatrix(SeqFishPlus_exprs,
i=SeqFishPlus_anno,
j=rownames(SeqFishPlus_exprs))
SeqFishPlus_exprs=matrix(SeqFishPlus_exprs)
SeqFishPlus_exprs[1:3, 1:3]
SeqFishPlus_exprs=VC_exprs[,which(copy_loc_file$field_col<=4)]
SeqFishPlus_exprs=as.matrix(SeqFishPlus_exprs)
SeqFishPlus_exprs[1:3, 1:3]
SeqFishPlus_exprs <- as(SeqFishPlus_exprs, "sparseMatrix")
SeqFishPlus_exprs[1:3, 1:3]
colnames(SeqFishPlus_exprs)=SeqFishPlus_anno
SeqFishPlus_exprs[1:3, 1:3]
save(SeqFishPlus_exprs,
file="DataToShare/SeqFishPlusCortexFilter_expr.Rdata")
SeqFishPlus_exprs=VC_exprs[,which(copy_loc_file$field_col<=4)]
SeqFishPlus_exprs=as.matrix(SeqFishPlus_exprs)
colnames(SeqFishPlus_exprs)=SeqFishPlus_anno
save(SeqFishPlus_exprs,
file="DataToShare/SeqFishPlusCortexFilter_expr.Rdata")
loc=SeqFishPlus_loc[which(SeqFishPlus_anno!="Ependymal"),]
dim(loc)
dim(SeqFishPlus_loc)
anno=SeqFishPlus_anno[which(SeqFishPlus_anno!="Ependymal")]
table(anno)
expr=SeqFishPlus_exprs[,which(SeqFishPlus_anno!="Ependymal")]
expr=as.matrix(expr)
colnames(anno)=anno
colnames(expr)=SeqFishPlus_anno
colnames(expr)=anno
save(expr,
file="DataToShare/SeqFishPlusCortexFilter_expr.Rdata")
save(loc,
file="DataToShare/SeqFishPlusCortexFilter_loc.Rdata")
dim(loc)
dim(expr)
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/Github/Data/scRNAseq_GTEx_breast.RData")
rm(list=ls())
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/Github/Data/scRNAseq_GTEx_breast.RData")
objects()
save(expr, file="DataToShare/snRNAseq_breast_expr.Rdata")
save(CopulaEst, file="DataToShare/snRNAseq_breast_CopulaEst.Rdata")
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/DataToShare/snRNAseq_breast_CopulaEst.Rdata")
load("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/Github/Data/SeqFishPlusCortexFilter_expr.Rdata")
load("Github/Data/SeqFishPlusCortexFilter_expr.Rdata")
dim(expr)
load("Github/Data/SeqFishPlusCortexFilter_loc.Rdata")
dim(loc)
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
library(data.table)
#library(scDesign2)
library(parallel, MASS, pscl)
# (1.3.1) --> No spatial data
# We need expression data
# PointSimulator Functions for 2 regions---------
# input scRNAseq  data:
load("../Data/scRNAseq_GTEx_breast.RData")
getwd("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/Github/")
setwd("/Users/songxiaoyu152/Library/CloudStorage/OneDrive-TheMountSinaiHospital/SpatialTranscriptomics/Paper_Simulator/Github/")
load("../Data/scRNAseq_GTEx_breast.RData")
load("Data/scRNAseq_GTEx_breast.RData")
expr[1:3, 1:3]
expr[1:10, 1:3]
expr[1:20, 1:3]
library(edgeR)
DEGlist
?DGEList
library(survival)
n=1000
df=data.frame(time=exp(rnorm(n)),
censor=rbinom(n, 1, 0.5),
x1=rnorm(n),
x2=rep(1, n))
library(survival)
n=1000
df=data.frame(OS_time=exp(rnorm(n)),
OS=rbinom(n, 1, 0.5),
x1=rnorm(n),
x2=rep(1, n))
df[1:3,]
s = Surv(time=df$OS_time, event=df$OS)
?coxph
coxph(s~df$x1)
coxph(s~df$x1+df$x2)
summary(coxph(s~df$x1+df$x2))
result = summary(coxph(s~df$x1+df$x2))
result$coefficients
result = summary(coxph(s~df$x1+df$x2))
ret_df = data.frame(P=result$coefficients[1,][5], BETA=result$coefficients[1,][1], SEBETA=result$coefficients[1,][3], HR=result$conf.int[1,][1], lowCI=result$conf.int[1,][3], highCI=result$conf.int[1,][4])
ret_df
summary(coxph(s~df$x1+as.factor(df$x2)))
summary(coxph(s~df$x1+as.numeric(as.factor(df$x2))))
library(fastDummies)
?fastDummies
dummy_cols(df$x2)
df$x2
dummy_rows(df$x2)
dummy(df$x2)
df[1:3,]
dummy(df[-c("OS_time", "OS")])
dummy(df[,-c("OS_time", "OS")])
dudummy_columns(dat$x2)
dummy_columns(dat$x2)
dummy_columns(df$x2)
library(recipes)
step_dummy(df$x2)
step_dummy(df[,"x2"])
a=df$x2
step_dummy(a)
?step_dummy
df%>%step_dummy("x2")
df%>%step_dummy(x2, one_hot=T)
df %>% step_dummy(x2, one_hot=T)
df %>% step_dummy(x2, one_hot=T)
a=df %>% step_dummy(x2, one_hot=T)
a[1:3]
a[1:6]
a[1:5]
