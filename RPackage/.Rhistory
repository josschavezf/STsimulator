S=c(2, -1)) # interactive input by cell type
same.dis.cutoff =0.05
even.distribution.coef=0.1
Copula=CopulaEst # Copula=NULL if an external data is used
depth_simu_ref_ratio=1 #(1: sum(simulated) = sum(expr))
# Every time add a spatial pattern
# Step 1: Generate regions ----
# Input: seed, nRegion
# Output: window, area
win=RandomRegionWindow(nRegion=nRegion, seed=seed)
cell.loc=cell.loc.fc(N=N, win=win, cell.prop=cell.prop,
cell.inh.attr.input=cell.inh.attr.input,
same.dis.cutoff =same.dis.cutoff,
even.distribution.coef=even.distribution.coef,
seed=seed)
win
cell.loc
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed)
length(sim.count)
dim(sim.count[[1]])
dim(sim.count[[2]])
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
pattern2= Add.Distance.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count, r=2,
perturbed.cell.type="Epithelial cell",
adjacent.cell.type="Immune (myeloid)",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GeneID=NULL,
PropOfGene=0.1,
seed=seed)
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
pattern1=Add.Spatial.Expr.Pattern(sim.count, r=1,
CellType="Adipocyte",
GeneID=NULL,
PropOfGenes=0.1,
delta.mean=1,
delta.sd=0.001, seed=seed)
pattern2= Add.Distance.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count, r=2,
perturbed.cell.type="Epithelial cell",
adjacent.cell.type="Immune (myeloid)",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GeneID=NULL,
PropOfGenes=0.1,
seed=seed)
pattern3= Add.Expr.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count,  r=1,
perturbed.cell.type="Fibroblast",
adjacent.cell.type="Endothelial cell",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GenePairIDMatrix=NULL,
PropOfGenePair=0.1,
Bidirectional=T,
seed=seed)
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
pattern3= Add.Expr.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count,  r=1,
perturbed.cell.type="Fibroblast",
adjacent.cell.type="Endothelial cell",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GenePairIDMatrix=NULL,
PropOfGenes=0.1,
Bidirectional=T,
seed=seed)
pattern.list=list(pattern1, pattern2, pattern3)
bond.extreme=T
keep.total.count=T
integer=T
R=length(sim.count)
K=length(pattern.list)
K
R
i=1
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
length(beta.matrix.list)
beta.matrix=Reduce("+", beta.matrix.list)
beta.matrix.combined=Reduce("+", beta.matrix.list)
dim(beta.matrix.combined)
beta.matrix.combined[1:3, 1:3]
beta.matrix.combined[1:10, 1:10]
sim.count1=sim.count[[i]]
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
dim(sim.count.update)
sim.count.update[1:3, 1:3]
if (bond.extreme==T) {
TenPerReads=apply(sim.count.update, 2, sum)/10
for (i in 1:ncol(sim.count.update)) {
sim.count.update[,i][which(sim.count.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
ratio=sum(sim.count1)/sum(sim.count.update)
ratio
sum(sim.count.update)
sum(sim.count1)
sim.count.update*ratio
sum(sim.count.update*ratio)
sum(sim.count1)
scST.expr.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count.update, 2, sum)/10
for (i in 1:ncol(sim.count.update)) {
sim.count.update[,i][which(sim.count.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count.update)
sim.count.update=sim.count.update*ratio
}
if (integer==T) {
sim.count.update=round(sim.count.update)
}
return(sim.count.update=sim.count.update)
}
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=scST.expr.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
scST.expr.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
if (integer==T) {
sim.count1.update=round(sim.count1.update)
}
return(sim.count1.update)
}
sim.count.update=vector("list", length=R)
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=scST.expr.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
dim(sim.count.update)
length(sim.count.update)
dim(sim.count.update[[1]])
dim(sim.count.update[[2]])
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
#library(scDesign2)
library(parallel, MASS, pscl)
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
load("../DataToShare/scRNAseq_GTEx_breast.RData")
seed=124
nRegion=2
N=1000
# For each region cell.prop and =cell.inh.attr.input
cell.prop=cell.inh.attr.input=vector("list", nRegion);
for (r in 1:nRegion) {cell.prop[[r]]=table(anno)/length(anno)} # interactive change
cell.inh.attr.input[[1]]=data.frame(C1=c("Adipocyte", "Epithelial cell"),
C2=c("Endothelial cell","Epithelial cell"),
S=c(2, -1)) # interactive input by cell type
same.dis.cutoff =0.05
even.distribution.coef=0.1
Copula=CopulaEst # Copula=NULL if an external data is used
depth_simu_ref_ratio=1 #(1: sum(simulated) = sum(expr))
# Every time add a spatial pattern
# Step 1: Generate regions ----
# Input: seed, nRegion
# Output: window, area
win=RandomRegionWindow(nRegion=nRegion, seed=seed)
# Step 2: Generate cells in each region (repeat for `nRegion` times) ----
# Input: N, win, cell.prop, cell.inh.attr.input, same.dis.cutoff, even.distribution.coef, seed
# Output: cell.loc
# R1 ---> make it inside of a function
cell.loc=cell.loc.fc(N=N, win=win, cell.prop=cell.prop,
cell.inh.attr.input=cell.inh.attr.input,
same.dis.cutoff =same.dis.cutoff,
even.distribution.coef=even.distribution.coef,
seed=seed)
# Step 3: Generate expression profiles for cells in each region (repeat it for `nRegion` times) ----
# Input: expr, anno, Copula (optional; if use our data, Copula is pre-estimated),
#        cell.loc, depth_simu_ref_ratio
# Output: a list of length `nRegion`; each element is a G by N_r count matrix
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed)
# Step 4: Add spatial patterns (repeatedly)
# Input: expr, r, CellType (interactive select), GeneID (upload) or PropOfGenes,
#               delta.mean (averaged effect size), delta.sd (sd of effect size)
# Output: G by N.R1 beta.matrix
pattern1=Add.Spatial.Expr.Pattern(sim.count, r=1,
CellType="Adipocyte",
GeneID=NULL,
PropOfGenes=0.1,
delta.mean=1,
delta.sd=0.001, seed=seed)
# Step 5: Add distance to gene interactions
pattern2= Add.Distance.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count, r=2,
perturbed.cell.type="Epithelial cell",
adjacent.cell.type="Immune (myeloid)",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GeneID=NULL,
PropOfGenes=0.1,
seed=seed)
pattern3= Add.Expr.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count,  r=1,
perturbed.cell.type="Fibroblast",
adjacent.cell.type="Endothelial cell",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GenePairIDMatrix=NULL,
PropOfGenes=0.1,
Bidirectional=T,
seed=seed)
sim.count.update=scST.Expr(sim.count, pattern.list=list(pattern1, pattern2, pattern3),
bond.extreme=T, keep.total.count=T,
integer=T)
length(sim.count)
pattern.list=list(pattern1, pattern2, pattern3)
bond.extreme=T
keep.total.count=T
integer=T
R=length(sim.count)
K=length(pattern.list)
sim.count.update=vector("list", length=R)
pattern.list=NULL
K=length(pattern.list)
K
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
i=1
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
length(beta.matrix.list)
beta.matrix.list
combined.beta.matrix=Reduce("+", beta.matrix.list)
combined.beta.matrix
sim.count.update[[i]]=scST.expr.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
pattern.list=list(pattern1, pattern2, pattern3)
pattern.list=list(pattern1, pattern2, pattern3)
R=length(sim.count)
K=length(pattern.list)
sim.count.update=vector("list", length=R)
i
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
combined.beta.matrix
dim(combined.beta.matrix)
sim.count1=sim.count[[i]]
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
G
N
dim(sim.count1.update)
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
#' scST.Expr
#'
#' input scRNAseq simulated counts and a list of beta matrices, output revised counts
#' @export
Pattern.Adj.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
if (integer==T) {
sim.count1.update=round(sim.count1.update)
}
return(sim.count1.update)
}
sim.count.update=vector("list", length=R)
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=Pattern.Adj.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
#
#' scST.Expr
#'
#' input scRNAseq simulated counts and a list of beta matrices, output revised counts
#' @export
Pattern.Adj.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
if (integer==T) {
sim.count1.update=round(sim.count1.update)
}
return(sim.count1.update)
}
Pattern.Adj= function(sim.count, pattern.list=NULL,
bond.extreme=T, keep.total.count=T,
integer=T) {
R=length(sim.count)
K=length(pattern.list)
if (K==0) {sim.count.update=sim.count} else {
sim.count.update=vector("list", length=R)
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=Pattern.Adj.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
}
return(sim.count.update=sim.count.update)
}
# Step 6: Adjust total counts for Steps 4-5
sim.count.update=Pattern.Adj(sim.count, pattern.list=list(pattern1, pattern2, pattern3),
bond.extreme=T, keep.total.count=T,
integer=T)
output=MergeRegion(points.list=cell.loc, expr.list=sim.count.update)
dim(output)
length(output)
output$meta
output$meta[1:3,]
dim(output$count)
output$count[1:3 ,1:3]
library(shiny); runApp('~/Dropbox/SpatialTranscriptomics/Paper_Simulator/Rshiny/app2.R')
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
expr[1:3 ,1:3]
colnames(expr)=anno
save(expr, CopulaEst, file="../DataToShare/scRNAseq_GTEx_breast.RData")
write.table(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.tsv")
write.table(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
save(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
expr[1:3 ,1:3]
table(anno)
class(Endothelial cell)
class(anno)
library(tidyverse)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell", anno)
table(anno)
anno=dat$`Cell types level 2`
load("../DataToShare/scRNAseq_GTEx_breast.RData")
anno=colnames(expr)
table(anno)
class(anno)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell", anno)
class(anno)
table(anno)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell",
ifelse(anno=="Epithelial cell", "EpithelialCell",
if(anno=="Immune (myeloid)", "ImmuneMyeloid", anno)))
anno=ifelse(anno=="Endothelial cell", "EndothelialCell",
ifelse(anno=="Epithelial cell", "EpithelialCell",
ifelse(anno=="Immune (myeloid)", "ImmuneMyeloid", anno)))
table(anno)
colnames(expr)=anno
save(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
expr[1:3, 1:3]
a=matrix(rpoisson(10000, 2), ncol=50)
a=matrix(rpois(10000, 2), ncol=50)
dim(a)
a[1:3, 1:3]
paste0("CellType", sample(1:3, 50))
paste0("CellType", sample(1:3, 50, replace=T))
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
a[1:3, 1:3]
write.table(a, file="../DataToShare/fake1.tsv")
a=matrix(rpois(10000, 2), ncol=50)
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
write.table(a, file="../DataToShare/fake2.tsv")
a=matrix(rpois(10000, 2), ncol=50)
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
write.table(a, file="../DataToShare/fake3.tsv")
a=cbind(runif(50), runif(50))
a[1:3,]
write.table(a, file="../DataToShare/fake3_spatial.tsv")
write.table(a, file="../DataToShare/fake2_spatial.tsv")
write.table(a, file="../DataToShare/fake1_spatial.tsv")
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
#library(scDesign2)
library(parallel, MASS, pscl)
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
# put in parameters
seed=124
nRegion=2
N=1000
# more spatial parameters
cell.prop=cell.inh.attr.input=vector("list", nRegion);
# put in parameters
seed=124
nRegion=2
N=1000
# more spatial parameters
cell.prop=cell.inh.attr.input=vector("list", nRegion);
#background run
#for (r in 1:nRegion) {cell.prop[[r]]=table(anno)/length(anno)} # interactive change
# cell.inh.attr.input[[1]]=data.frame(C1=c("Adipocyte", "Epithelial cell"),
#   C2=c("Endothelial cell","Epithelial cell"),
#  S=c(2, -1)) # interactive input by cell type
same.dis.cutoff =0.05
even.distribution.coef=0.1
# more expression parameters
Copula=CopulaEst # Copula=NULL if an external data is used
depth_simu_ref_ratio=1 #(1: sum(simulated) = sum(expr))
anno=colnames(expr)
cell.inh.attr.input=vector("list", nRegion);
cell.inh.attr.input
