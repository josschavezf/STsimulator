tt1, "_cell_type")))
GeneID1=eval(parse(text=paste0("spatial_pattern_",
tt1, "_gene_id")))
if (GeneID1=="NULL") {
GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
PropOfGenes=eval(parse(text=paste0("spatial_pattern_",
tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
delta.mean=eval(parse(text=paste0("spatial_pattern_",
tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_pattern_",
tt1, "_sd")))
beta.all[[i]][[tt1]]=Add.Spatial.Expr.Pattern(sim.count = sim_count,
r=r,
CellType=CellType,
GeneID=GeneID,
PropOfGenes=PropOfGenes,
delta.mean=delta.mean,
delta.sd=delta.sd,
seed=seed)
}
# add expr-distance interaction
for (tt1 in t2:1) {
if (tt1==0) {break}
#para[grep("spatial_int_dist_", colnames(para))]
r=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_region")))
if (r=="NULL") {r=1}
perturbed.cell.type=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_cell_type_perturbed")))
adjacent.cell.type=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_cell_type_adj")))
int.dist.threshold=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_dist_cutoff")))
GeneID1=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_gene_id1")))
if (GeneID1=="NULL") {
GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
PropOfGenes=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
delta.mean=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_sd")))
beta.all[[i]][[(t1+tt1)]]=Add.Distance.Asso.Pattern(ppp.obj=cell_loc_list_i,
sim.count=sim_count,
r=r,
perturbed.cell.type=perturbed.cell.type,
adjacent.cell.type=adjacent.cell.type,
int.dist.threshold=int.dist.threshold,
delta.mean=delta.mean,
delta.sd=delta.sd,
GeneID=GeneID, # Cell A Gene 1--> Cell B
PropOfGenes=PropOfGenes,
seed=seed)
}
# add expr-distance interaction
for (tt1 in t3:1) {
if (tt1==0) {break}
#para[grep("spatial_int_expr_", colnames(para))]
r=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_region")))
if (r=="NULL") {r=1}
perturbed.cell.type=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_cell_type_perturbed")))
adjacent.cell.type=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_cell_type_adj")))
int.dist.threshold=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_dist_cutoff")))
GeneID1=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_gene_id1")))
if (GeneID1=="NULL") {
GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
GeneID2=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_gene_id2")))
if (GeneID2=="NULL") {
GeneIDp=eval(parse(text=GeneID2))
} else {GeneIDp=unlist(strsplit(GeneID2, ","))}
if (is.null(GeneID)) {
GenePairIDMatrix=NULL
} else {GenePairIDMatrix=cbind(GeneID, GeneIDp)}
PropOfGenes=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
Bidirectional1=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_bidirectional")))
Bidirectional=eval(parse(text=Bidirectional1))
delta.mean=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_sd")))
beta.all[[i]][[(t1+t2+tt1)]]=Add.Expr.Asso.Pattern(ppp.obj=cell_loc_list_i,
sim.count=sim_count,
r=r,
perturbed.cell.type=perturbed.cell.type,
adjacent.cell.type=adjacent.cell.type,
int.dist.threshold=int.dist.threshold,
delta.mean=delta.mean,
delta.sd=delta.sd,
GenePairIDMatrix=GenePairIDMatrix,
PropOfGenes=PropOfGenes,
Bidirectional=Bidirectional,
seed=seed)
}
}
return(beta.all)
}
# ----------------- ParaExpr ---------------
ParaFitExpr=function(para, expr, feature, CopulaEst, ncores){
sim_method=ifelse(gene_cor=="TRUE", "copula", "ind")
# fit by input data
model_params=Use_scDesign2_model_params(expr=expr,
feature=feature,
Copula=CopulaEst,
sim_method = sim_method,
region_specific_model=region_specific_model,
ncores=ncores)
return(model_params)
}
ParaExpr=function(para, cell_loc_list, expr, feature,
CopulaEst, all_seeds, ncores=1){
sim_method=ifelse(gene_cor=="TRUE", "copula", "ind")
# fit by input data
model_params=ParaFitExpr(para, expr, feature, CopulaEst, ncores=ncores)
# simulate
for (i in 1:num_simulated_datasets) {
sim_count=Use_scDesign2(ppp.obj=cell_loc_list[[i]],
model_params=model_params,
expr=expr,
feature=feature,
depth_simu_ref_ratio=expr_depth_ratio,
sim_method=sim_method,
region_specific_model=region_specific_model,
seed=all_seeds[[i]])
pattern_list=ParaPattern(para=para, sim_count=sim_count,
cell_loc_list_i=cell_loc_list[[i]],
seed=all_seeds[[i]])
sim_count_update=Pattern.Adj(sim.count=sim_count,
pattern.list=pattern_list[[i]],
bond.extreme=T, keep.total.count=T,
integer=T)
output=MergeRegion(points.list=cell_loc_list[[i]],
expr.list=sim_count_update)
expr_pattern=ExprPattern(pattern.list.i=pattern_list[[i]]) %>% as.data.frame()
print(paste("Finished simulating data", i))
# save
save_name=paste0(path_to_output_dir, output_name)
if (is.null(expr_pattern)==F) {
write_tsv(expr_pattern, file=paste0(save_name, "_expr_pattern_", i, ".tsv"))
}
# multicell?
if (num_spots=="NULL") {
write_tsv(output$meta,
file=paste0(save_name, "_meta_", i, ".tsv"))
write_tsv(as.data.frame(output$count)%>% rownames_to_column("GeneName"),
file=paste0(save_name, "_count_", i, ".tsv"))
} else{
output2=multicell(expr=output$count, cell_feature=output$meta, NoSpot=num_spots)
write_tsv(output2$spot_feature,
file=paste0(save_name, "_meta_", i, ".tsv"))
write_tsv(as.data.frame(output2$count)%>% rownames_to_column("GeneName"),
file=paste0(save_name, "_count_", i, ".tsv"))
}
print(paste("Finished saving data", i))
}
}
pattern_list=ParaPattern(para=para, sim_count=sim_count,
cell_loc_list_i=cell_loc_list[[i]],
seed=all_seeds[[i]])
length(sim_count)
# check No. of adding spatial patterns
t1=length(grep("spatial_pattern_", colnames(para)))/6
t2=length(grep("spatial_int_dist_", colnames(para)))/8
t3=length(grep("spatial_int_expr_", colnames(para)))/10
t0=sum(t1, t2, t3)
beta.all=vector("list", num_simulated_datasets)
i
# add spatial
if (t0>0) {
beta.all[[i]]=vector("list", t0)
}
for (tt1 in t1:1) {
if (tt1==0) {break}
#para[grep("spatial_pattern_", colnames(para))]
r=eval(parse(text=paste0("spatial_pattern_",
tt1, "_region")))
CellType=eval(parse(text=paste0("spatial_pattern_",
tt1, "_cell_type")))
GeneID1=eval(parse(text=paste0("spatial_pattern_",
tt1, "_gene_id")))
if (GeneID1=="NULL") {
GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
PropOfGenes=eval(parse(text=paste0("spatial_pattern_",
tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
delta.mean=eval(parse(text=paste0("spatial_pattern_",
tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_pattern_",
tt1, "_sd")))
beta.all[[i]][[tt1]]=Add.Spatial.Expr.Pattern(sim.count = sim_count,
r=r,
CellType=CellType,
GeneID=GeneID,
PropOfGenes=PropOfGenes,
delta.mean=delta.mean,
delta.sd=delta.sd,
seed=seed)
}
# add expr-distance interaction
for (tt1 in t2:1) {
if (tt1==0) {break}
#para[grep("spatial_int_dist_", colnames(para))]
r=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_region")))
if (r=="NULL") {r=1}
perturbed.cell.type=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_cell_type_perturbed")))
adjacent.cell.type=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_cell_type_adj")))
int.dist.threshold=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_dist_cutoff")))
GeneID1=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_gene_id1")))
if (GeneID1=="NULL") {
GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
PropOfGenes=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
delta.mean=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_int_dist_",
tt1, "_sd")))
beta.all[[i]][[(t1+tt1)]]=Add.Distance.Asso.Pattern(ppp.obj=cell_loc_list_i,
sim.count=sim_count,
r=r,
perturbed.cell.type=perturbed.cell.type,
adjacent.cell.type=adjacent.cell.type,
int.dist.threshold=int.dist.threshold,
delta.mean=delta.mean,
delta.sd=delta.sd,
GeneID=GeneID, # Cell A Gene 1--> Cell B
PropOfGenes=PropOfGenes,
seed=seed)
}
tt1
tt1=1
if (tt1==0) {break}
#para[grep("spatial_int_expr_", colnames(para))]
r=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_region")))
if (r=="NULL") {r=1}
r
perturbed.cell.type=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_cell_type_perturbed")))
adjacent.cell.type=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_cell_type_adj")))
int.dist.threshold=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_dist_cutoff")))
GeneID1=eval(parse(text=paste0("spatial_int_expr_",
tt1, "_gene_id1")))
perturbed.cell.type
adjacent.cell.type
int.dist.threshold
class(int.dist.threshold)
GeneID1
if (GeneID1=="NULL") {GeneID=eval(parse(text=GeneID1))
} else {GeneID=unlist(strsplit(GeneID1, ","))}
GeneID
GeneID2=eval(parse(text=paste0("spatial_int_expr_", tt1, "_gene_id2")))
if (GeneID2=="NULL") {GeneIDp=eval(parse(text=GeneID2))
} else {GeneIDp=unlist(strsplit(GeneID2, ","))}
GeneIDp
if (is.null(GeneID)) {
GenePairIDMatrix=NULL
} else {GenePairIDMatrix=cbind(GeneID, GeneIDp)}
PropOfGenes=eval(parse(text=paste0("spatial_int_expr_", tt1, "_gene_prop")))
if (PropOfGenes=="NULL") {PropOfGenes=eval(parse(text=PropOfGenes))}
PropOfGenes
Bidirectional1=eval(parse(text=paste0("spatial_int_expr_",tt1, "_bidirectional")))
Bidirectional=eval(parse(text=Bidirectional1))
Bidirectional1
delta.mean=eval(parse(text=paste0("spatial_int_expr_", tt1, "_mean")))
delta.sd=eval(parse(text=paste0("spatial_int_expr_",tt1, "_sd")))
delta.mean
delta.sd
beta.all[[i]][[(t1+t2+tt1)]]=Add.Expr.Asso.Pattern(ppp.obj=cell_loc_list_i,
sim.count=sim_count,
r=r,
perturbed.cell.type=perturbed.cell.type,
adjacent.cell.type=adjacent.cell.type,
int.dist.threshold=int.dist.threshold,
delta.mean=delta.mean,
delta.sd=delta.sd,
GenePairIDMatrix=GenePairIDMatrix,
PropOfGenes=PropOfGenes,
Bidirectional=Bidirectional,
seed=seed)
ppp.obj=cell_loc_list_i
ppp.obj
sim.count=sim_count
R
r
set.seed(seed*3+194)
R=length(sim.count)
sim.count1=sim.count[[r]]
N=ncol(sim.count1)
G=nrow(sim.count1)
GeneAll=rownames(sim.count1)
R
sim.count1
dim(sim.count1)
N
G
GeneAll
# key matrix
beta.matrix=vector("list", length=R)
for (i in 1:R) {beta.matrix[[i]]=matrix(0, nrow=G,  ncol=ncol(sim.count[[i]]))}
colnames(beta.matrix[[r]])=colnames(sim.count1)
rownames(beta.matrix[[r]])=GeneAll
# spatial info
nbr.idx=Find.Neighbor.Pairs(ppp.obj=ppp.obj[[r]],
interacting.cell.type.pair=c(perturbed.cell.type, adjacent.cell.type),
int.dist.threshold=int.dist.threshold)
ppp.obj=ppp.obj[[r]]
ppp.obj
interacting.cell.type.pair=c(perturbed.cell.type, adjacent.cell.type)
interacting.cell.type.pair
int.dist.threshold=int.dist.threshold
int.dist.threshold
cell.loc=cbind(ppp.obj$x, ppp.obj$y)
lat <- c(50.639342, 50.623727, 50.578924, 50.786729)
lon <- c(10.236543, 10.1896532, 10.587272, 10.776234)
type <- c("A", "A", "B", "C")
df <- data.frame(lat, lon, type)
df
sp.data <- df
set.seed(123)
library(sf)
pts1 <- st_as_sf(x = data.frame(id=seq(1,204467,1),
year=sample(seq(from = 1990, to = 2018, by = 1), size = 204467, replace = TRUE),
xcoord=sample(seq(from = -180, to = 180, by = 1), size = 204467, replace = TRUE),
ycoord=sample(seq(from = -90, to = 90, by = 1), size = 204467, replace = TRUE)),
coords=c("xcoord","ycoord"),crs=4326)
pts2 <- st_as_sf(x = data.frame(id=seq(1,5297,1),
year=sample(seq(from = 1990, to = 2018, by = 1), size = 5297, replace = TRUE),
xcoord=sample(seq(from = -180, to = 180, by = 1), size = 5297, replace = TRUE),
ycoord=sample(seq(from = -90, to = 90, by = 1), size = 5297, replace = TRUE)),
coords=c("xcoord","ycoord"),crs=4326)
pts1
pts2
distmat <- st_distance(pts1,pts2,by_element = FALSE)
cell.loc1=cell.loc[1:3,]
cell.loc2=cell.loc[4:6,]
cell.loc1
cell.loc2
outer(cell.loc1, cell.loc2)
?outer
?pairdist
library(proxy)
dist(cell.loc1, cell.loc2,
method="euclidean")
cell.loc1
cell.loc2
sqrt((-24.67386+-85.62048)^2+(7386.094-7389.341)^2)
sqrt((-24.67386+85.62048)^2+(7386.094-7389.341)^2)
sqrt((24.21659+85.62048)^2+(7388.202-7389.341)^2)
detach("package:proxy", unload = TRUE)
dist(cell.loc1, cell.loc2, method="euclidean")
library(proxy)
cell1.idx=which(ppp.obj$marks==interacting.cell.type.pair[1])
cell2.idx=which(ppp.obj$marks==interacting.cell.type.pair[2])
m=dist(cell.loc[cell1.idx,], cell.loc[cell2.idx,], method="euclidean")
dim(m)
# in neighbor or not?
dmax=max( max(ppp.obj$x)-min(ppp.obj$x), max(ppp.obj$y)-min(ppp.obj$y))
m2=m< (int.dist.threshold*dmax)
length()
int.dist.threshold*dmax
mm=m
m=m[1:5, 1:3]
m
m2=m< (int.dist.threshold*dmax)
m
(int.dist.threshold*dmax)
dmax
neighbo.loc.idx=which(m2 == T, arr.ind = TRUE)
neighbo.loc.idx
?which
x <- big.matrix(10, 2, type='integer', init=-5)
library(bigmemory)
install.packages("bigmemory")
library(bigmemory)
x <- big.matrix(10, 2, type='integer', init=-5)
x
options(bigmemory.allow.dimnames=TRUE)
colnames(x) <- c("alpha", "beta")
is.big.matrix(x)
dim(x)
colnames(x)
rownames(x)
x[,]
x[1:8,1] <- 11:18
colnames(x) <- NULL
x[,]
x<1
x[,]<1
which(x[,]<1, arr.ind=T)
m=as.big.matrix(m)
neighbo.loc.idx=which(m< (int.dist.threshold*dmax), arr.ind = TRUE)
neighbo.loc.idx=which(m[,]< (int.dist.threshold*dmax), arr.ind = TRUE)
neighbo.loc.idx
m=mm
dim(m)
m=as.big.matrix(m)
class(m)
m[1:3, 1:3]
m=as.big.matrix(as.matrix(m))
a=as.matrix(m)
m=as.big.matrix(a)
class(a)
class(m)="matrix"
m[1:3 ,1:3]
m=as.big.matrix(m)
dim(m)
m=mm
neighbo.loc.idx=which(m< (int.dist.threshold*dmax), arr.ind = TRUE)
dist
rm(list=ls())
library(tidyverse)
library(data.table)
library(raster)
library(spatstat)
library(rlist)
library(parallel)
library(doParallel)
library(proxy)
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator/Github")
source("RPackage/R/PointSimulator_NoData.R")
source("RPackage/R/PointSimulator_STData.R")
source("RPackage/R/ExprSimulator.R")
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator/Github")
source("RPackage/R/PointSimulator_NoData.R")
source("RPackage/R/PointSimulator_STData.R")
source("RPackage/R/ExprSimulator.R")
source("RPackage/R/scDesign2_fit_revised.R")
source("RPackage/R/scDesign2_simulate_revised.R")
source("RPackage/R/ParameterDigest.R")
source("RPackage/R/MultiCell.R")
input="ParameterFile/example3.tsv"
ParaSimulation(input=input)
detach(para)
detach(para)
detach(para)
detach(para)
detach(para)
detach(para)
detach(para)
input="ParameterFile/example3.tsv"
ParaSimulation(input=input)
library(scDesign2)
library(STsimulator)
library(STsimulator)
setwd("/Users/songxiaoyu152/Dropbox/SpatialTranscriptomics/Paper_Simulator/Github")
input="ParameterFile/example3.tsv"
ParaSimulation(input=input)
devtools::document()
library(STsimulator)
?attach
?rgamma
library(STsimulator)
usethis::use_testthat()
use_test()
?multicell
library(STsimulator)
?multicell
library(STsimulator)
?multicell
library(STsimulator)
?ParaSimulation
library(STsimulator)
?ParaSimulation
library(STsimulator)
?ParaSimulation
library(STsimulator)
detach("package:STsimulator", unload = TRUE)
library(STsimulator)
library(STsimulator)
detach("package:STsimulator", unload = TRUE)
library(STsimulator)
library(STsimulator)
?ParaSimulation
library(STsimulator)
library(STsimulator)
?ParaSimulation
detach("package:STsimulator", unload = TRUE)
library(STsimulator)
devtools::document()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(STsimulator)
library(STsimulator)
library(STsimulator)
library(STsimulator)
?Use_scDesign2_1region
Use_scDesign2_1region
library(STsimulator)
