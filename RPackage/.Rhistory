K=length(pattern.list)
sim.count.update=vector("list", length=R)
pattern.list=NULL
K=length(pattern.list)
K
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
i=1
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
length(beta.matrix.list)
beta.matrix.list
combined.beta.matrix=Reduce("+", beta.matrix.list)
combined.beta.matrix
sim.count.update[[i]]=scST.expr.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
pattern.list=list(pattern1, pattern2, pattern3)
pattern.list=list(pattern1, pattern2, pattern3)
R=length(sim.count)
K=length(pattern.list)
sim.count.update=vector("list", length=R)
i
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
combined.beta.matrix
dim(combined.beta.matrix)
sim.count1=sim.count[[i]]
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
G
N
dim(sim.count1.update)
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
#' scST.Expr
#'
#' input scRNAseq simulated counts and a list of beta matrices, output revised counts
#' @export
Pattern.Adj.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
if (integer==T) {
sim.count1.update=round(sim.count1.update)
}
return(sim.count1.update)
}
sim.count.update=vector("list", length=R)
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=Pattern.Adj.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
#
#' scST.Expr
#'
#' input scRNAseq simulated counts and a list of beta matrices, output revised counts
#' @export
Pattern.Adj.1region= function(sim.count1, combined.beta.matrix,
bond.extreme=T, keep.total.count=T,
integer=T) {
G=nrow(sim.count1)
N=ncol(sim.count1)
sim.count1.update= exp(log(sim.count1+1) +combined.beta.matrix)-1
# bond extreme values bonds at 10% reads
if (bond.extreme==T) {
TenPerReads=apply(sim.count1.update, 2, sum)/10
for (i in 1:ncol(sim.count1.update)) {
sim.count1.update[,i][which(sim.count1.update[,i]>TenPerReads[i])]=TenPerReads[i]
}
}
# scale by total count
if (keep.total.count==T) {
ratio=sum(sim.count1)/sum(sim.count1.update)
sim.count1.update=sim.count1.update*ratio
}
if (integer==T) {
sim.count1.update=round(sim.count1.update)
}
return(sim.count1.update)
}
Pattern.Adj= function(sim.count, pattern.list=NULL,
bond.extreme=T, keep.total.count=T,
integer=T) {
R=length(sim.count)
K=length(pattern.list)
if (K==0) {sim.count.update=sim.count} else {
sim.count.update=vector("list", length=R)
for (i in 1:R) {
beta.matrix.list=lapply(1:K, function(k) pattern.list[[k]]$beta.matrix[[i]])
combined.beta.matrix=Reduce("+", beta.matrix.list)
sim.count.update[[i]]=Pattern.Adj.1region(sim.count1=sim.count[[i]],
combined.beta.matrix=combined.beta.matrix,
bond.extreme=bond.extreme, keep.total.count=keep.total.count,
integer=integer)
}
}
return(sim.count.update=sim.count.update)
}
# Step 6: Adjust total counts for Steps 4-5
sim.count.update=Pattern.Adj(sim.count, pattern.list=list(pattern1, pattern2, pattern3),
bond.extreme=T, keep.total.count=T,
integer=T)
output=MergeRegion(points.list=cell.loc, expr.list=sim.count.update)
dim(output)
length(output)
output$meta
output$meta[1:3,]
dim(output$count)
output$count[1:3 ,1:3]
library(shiny); runApp('~/Dropbox/SpatialTranscriptomics/Paper_Simulator/Rshiny/app2.R')
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
expr[1:3 ,1:3]
colnames(expr)=anno
save(expr, CopulaEst, file="../DataToShare/scRNAseq_GTEx_breast.RData")
write.table(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.tsv")
write.table(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
save(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
expr[1:3 ,1:3]
table(anno)
class(Endothelial cell)
class(anno)
library(tidyverse)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell", anno)
table(anno)
anno=dat$`Cell types level 2`
load("../DataToShare/scRNAseq_GTEx_breast.RData")
anno=colnames(expr)
table(anno)
class(anno)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell", anno)
class(anno)
table(anno)
anno=ifelse(anno=="Endothelial cell", "EndothelialCell",
ifelse(anno=="Epithelial cell", "EpithelialCell",
if(anno=="Immune (myeloid)", "ImmuneMyeloid", anno)))
anno=ifelse(anno=="Endothelial cell", "EndothelialCell",
ifelse(anno=="Epithelial cell", "EpithelialCell",
ifelse(anno=="Immune (myeloid)", "ImmuneMyeloid", anno)))
table(anno)
colnames(expr)=anno
save(expr, file="../DataToShare/scRNAseq_GTEx_breast_expr.RData")
expr[1:3, 1:3]
a=matrix(rpoisson(10000, 2), ncol=50)
a=matrix(rpois(10000, 2), ncol=50)
dim(a)
a[1:3, 1:3]
paste0("CellType", sample(1:3, 50))
paste0("CellType", sample(1:3, 50, replace=T))
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
a[1:3, 1:3]
write.table(a, file="../DataToShare/fake1.tsv")
a=matrix(rpois(10000, 2), ncol=50)
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
write.table(a, file="../DataToShare/fake2.tsv")
a=matrix(rpois(10000, 2), ncol=50)
colnames(a)=paste0("CellType", sample(1:3, 50, replace=T))
rownames(a)=paste0("Gene", 1:200)
write.table(a, file="../DataToShare/fake3.tsv")
a=cbind(runif(50), runif(50))
a[1:3,]
write.table(a, file="../DataToShare/fake3_spatial.tsv")
write.table(a, file="../DataToShare/fake2_spatial.tsv")
write.table(a, file="../DataToShare/fake1_spatial.tsv")
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
#library(scDesign2)
library(parallel, MASS, pscl)
source("R/PointSimulator_NoData.R")
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
load("../DataToShare/scRNAseq_GTEx_breast.RData")
objects()
# put in parameters
seed=124
nRegion=2
N=1000
# more spatial parameters
cell.prop=cell.inh.attr.input=vector("list", nRegion);
# put in parameters
seed=124
nRegion=2
N=1000
# more spatial parameters
cell.prop=cell.inh.attr.input=vector("list", nRegion);
#background run
#for (r in 1:nRegion) {cell.prop[[r]]=table(anno)/length(anno)} # interactive change
# cell.inh.attr.input[[1]]=data.frame(C1=c("Adipocyte", "Epithelial cell"),
#   C2=c("Endothelial cell","Epithelial cell"),
#  S=c(2, -1)) # interactive input by cell type
same.dis.cutoff =0.05
even.distribution.coef=0.1
# more expression parameters
Copula=CopulaEst # Copula=NULL if an external data is used
depth_simu_ref_ratio=1 #(1: sum(simulated) = sum(expr))
anno=colnames(expr)
cell.inh.attr.input=vector("list", nRegion);
cell.inh.attr.input
getwd()
input="../ParameterFile/parameter_file_for_xiaoyu.tsv"
para=read.table(input)
para=fread(input)
library(data.table)
para=fread(input)
View(para)
para$parameters
para$parameters=="expression_data_file"
para$value
expression_data_file=para[para$parameters=="expression_data_file", "value"]
expression_data_file
spatial_data_file=para[para$parameters=="spatial_data_file", "value"]
spatial_data_file
para=data.frame(fread(input))
expression_data_file=para[para$parameters=="expression_data_file", "value"]
spatial_data_file=para[para$parameters=="spatial_data_file", "value"]
expression_data_file
spatial_data_file
is.na(spatial_data_file)
spatial_data_file==""
simulation_seed=as.numeric(para[para$parameters=="simulation_seed", "value"])
simulation_seed
num_simulated_cells=as.numeric(para[para$parameters=="num_simulated_cells", "value"])
num_simulated_cells
num_regions=para[para$parameters=="num_regions", "value"]
custom_cell_type_proportions=para[para$parameters=="custom_cell_type_proportions", "value"]
grep("cell_type_proportion",
para$parameters
)
cell_type_proportion=para[grep("cell_type_proportion",
para$parameters), "value"]
cell_type_proportion
cell_type_proportion=para[grep("cell_type_proportion_",
para$parameters), "value"]
cell_type_proportion
simulation_seed=as.numeric(para[para$parameters==
"simulation_seed", "value"])
num_simulated_cells=as.numeric(para[para$parameters==
"num_simulated_cells", "value"])
num_regions=para[para$parameters==
"num_regions", "value"]
custom_cell_type_proportions=para[para$parameters==
"custom_cell_type_proportions", "value"]
cell_type_proportion=para[grep("cell_type_proportion_",
para$parameters), "value"]
custom_cell_location_interactions=para[para$parameters==
"custom_cell_location_interactions", "value"]
cell_overlap_cutoff=para[para$parameters==
"cell_overlap_cutoff", "value"]
cell_even_distribution=para[para$parameters==
"cell_even_distribution", "value"]
cell_type_proportion
custom_cell_type_proportions
library(devtools)
document()
document()
library(STsimulator)
fit_marginals
document()
document()
library(STsimulator)
rm(list=ls())
library(raster)
library(spatstat)
library(tidyverse)
library(rlist)
library(data.table)
#library(scDesign2)
library(parallel, MASS, pscl)
# (1.3.1) --> No spatial data
# We need expression data
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
load("../Data/scRNAseq_GTEx_breast.RData")
# expr --> gene by cell  matrix of counts --> from datasets
# anno --> colnames of expr
anno=colnames(expr)
# CopulaEst --> optional; estimated Gaussian copulas from expr data
# put in parameters --
seed=124 # "Seed (to ensure reproducible simulation):"
nRegion=2  # No. of regions (suggested: 1-10)
N=1000    # No. of cells
# more spatial parameters --
# "No. of cells in each cell type in each region"
# Give default as below; allow users to chagne"
cell.prop=vector("list", nRegion);
for (r in 1:nRegion) {cell.prop[[r]]=table(anno)/length(anno)}
# "Cell inhibition/attraction of cells from appearing its neighborhood"
# create a L rows by 3 columns by nRegion array
# default NULL; Allow users to choose cell type 1, cell type 2, strength, and add rows.
# below is an example of 2 by 3 by 2 array
cell.inh.attr.input=vector("list", nRegion);
cell.inh.attr.input[[1]]=data.frame(C1=c("Adipocyte", "Epithelial cell"),
C2=c("Endothelial cell","Epithelial cell"),
S=c(2, -1)) # interactive input by cell type
#
same.dis.cutoff =0.05
even.distribution.coef=0.1
# more expression parameters
Copula=CopulaEst # Users do not need to choose; make Copula= NULL if an external data is used
depth_simu_ref_ratio=1 # "Ratio of simulated/reference sequencing depth"; default=1
# more parameters every time for adding a spatial pattern
# EX1: Add.Spatial.Expr.Pattern
# r=1
# CellType="Adipocyte"
# GeneID=NULL
# PropOfGenes=0.1
# delta.mean=1
# delta.sd=0.001
# EX1: Add.Spatial.Expr.Pattern
# r=1
# CellType="Adipocyte"
# GeneID="VHL"
# PropOfGenes=NULL
# delta.mean=1
# delta.sd=0.001
#  EX2: Add.Distance.Asso.Pattern
# r=2,
# perturbed.cell.type="Epithelial cell",
# adjacent.cell.type="Immune (myeloid)",
# int.dist.threshold=0.1,
# delta.mean=1,
# delta.sd=0.001,
# GeneID=NULL,
# PropOfGenes=0.1
# EX3: Add.Expr.Asso.Pattern
# r=1,
# perturbed.cell.type="Fibroblast",
# adjacent.cell.type="Endothelial cell",
# int.dist.threshold=0.1,
# delta.mean=1,
# delta.sd=0.001,
# GenePairIDMatrix=NULL,
# PropOfGenes=0.1,
# Bidirectional=T
# Step 1: Generate regions ----
# Input: seed, nRegion
# Output: window, area
win=RandomRegionWindow(nRegion=nRegion, seed=seed)
# Step 2: Generate cells in each region (repeat for `nRegion` times) ----
# Input: N, win, cell.prop, cell.inh.attr.input, same.dis.cutoff, even.distribution.coef, seed
# Output: cell.loc
# R1 ---> make it inside of a function
cell.loc=cell.loc.fc(N=N, win=win, cell.prop=cell.prop,
cell.inh.attr.input=cell.inh.attr.input,
same.dis.cutoff =same.dis.cutoff,
even.distribution.coef=even.distribution.coef,
seed=seed)
# Step 3: Generate expression profiles for cells in each region (repeat it for `nRegion` times) ----
# Input: expr, anno, Copula (optional; if use our data, Copula is pre-estimated),
#        cell.loc, depth_simu_ref_ratio
# Output: a list of length `nRegion`; each element is a G by N_r count matrix
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed)
# Step 4: Add spatial patterns (repeatedly)
# Input: expr, r, CellType (interactive select), GeneID (upload) or PropOfGenes,
#               delta.mean (averaged effect size), delta.sd (sd of effect size)
# Output: G by N.R1 beta.matrix
pattern1=Add.Spatial.Expr.Pattern(sim.count, r=1,
CellType="Adipocyte",
GeneID=NULL,
PropOfGenes=0.1,
delta.mean=1,
delta.sd=0.001, seed=seed)
# Step 5: Add distance to gene interactions
pattern2= Add.Distance.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count, r=2,
perturbed.cell.type="Epithelial cell",
adjacent.cell.type="Immune (myeloid)",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GeneID=NULL,
PropOfGenes=0.1,
seed=seed)
# Step 6: Add expr to gene interactions
pattern3= Add.Expr.Asso.Pattern(ppp.obj=cell.loc,
sim.count=sim.count,  r=1,
perturbed.cell.type="Fibroblast",
adjacent.cell.type="Endothelial cell",
int.dist.threshold=0.1,
delta.mean=1,
delta.sd=0.001,
GenePairIDMatrix=NULL,
PropOfGenes=0.1,
Bidirectional=T,
seed=seed)
# Step 7: Adjust total counts for Steps 4-6
sim.count.update=Pattern.Adj(sim.count, pattern.list=list(pattern1, pattern2, pattern3),
bond.extreme=T, keep.total.count=T,
integer=T)
# Step 5: combine points in different regions
output=MergeRegion(points.list=cell.loc, expr.list=sim.count.update)
warnings()
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim.method="coupla")
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim.method="coupla")
Use_scDesign2
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="coupla")
warnings()
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula")
warnings()
sim_method="copula"
path=getwd()
path
expression_data_file
input="../ParameterFile/parameter_file_for_xiaoyu.tsv"
expression_data_file=para[para$parameters=="expression_data_file", "value"]
para=data.frame(fread(input))
expression_data_file=para[para$parameters=="expression_data_file", "value"]
expression_data_file
SaveCopulaName=scRNAseq_GTEx_breast
SaveCopulaName="scRNAseq_GTEx_breast"
getwd()
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula",
SaveCopulaName="../Data/Copula1")
source("R/PointSimulator_NoData.R") # This one to Anna
source("R/scDesign2_revised.R")
source("R/ExprSimulator.R")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="copula",
SaveCopulaName="../Data/Copula1")
sim.count=Use_scDesign2(ppp.obj=cell.loc,
expr=expr, anno=anno,
Copula=CopulaEst,
depth_simu_ref_ratio=depth_simu_ref_ratio,
seed=seed, sim_method="ind",
SaveCopulaName="../Data/Copula1")
?Use_scDesign2_1region
?Find.Neighbor.Pairs
Find.Neighbor.Pairs
?Add.Distance.Asso.Pattern
document()
rm(list = c("Add.Distance.Asso.Pattern",
"Add.Spatial.Expr.Pattern", "fit_model_scDesign2",
"RandomRegionWindow", "scDesign2.revised",
"Use_scDesign2", "Use_scDesign2_1region"))
document()
rm(list = c("MergeRegion", "Pattern.Adj"))
document()
library(STsimulator)
